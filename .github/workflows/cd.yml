name: CD - Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'try-ci'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-qt6-base
          mingw-w64-x86_64-qt6-declarative
          mingw-w64-x86_64-qt6-shadertools
          mingw-w64-x86_64-qt6-tools
          mingw-w64-x86_64-qt6
          mingw-w64-x86_64-qt6-imageformats
          mingw-w64-x86_64-ffmpeg
          mingw-w64-x86_64-pkgconf
          
    - name: Configure with CMake
      shell: msys2 {0}
      run: |
        mkdir -p build
        cd build
        if command -v qt-cmake >/dev/null 2>&1; then
          qt-cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
        else
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/mingw64
        fi
        
    - name: Build
      shell: msys2 {0}
      run: |
        cd build
        ninja
        
    - name: Collect dependencies and create package
      shell: msys2 {0}
      run: |
        cd build
        set -euo pipefail
        set -x
        pkgdir=release-package
        mkdir -p "$pkgdir"

        # 1) Use windeployqt6 to collect Qt runtime and plugins
        if [ -x "/mingw64/bin/windeployqt6.exe" ]; then
          /mingw64/bin/windeployqt6.exe \
            --release \
            --qmldir ../src/qml \
            --dir "$pkgdir" \
            ./YUViz.exe || {
              echo "windeployqt6 failed, fallback to manual copy of Qt6*.dll"
              shopt -s nullglob
              qt_dlls=(/mingw64/bin/Qt6*.dll)
              echo "Qt6 DLLs to copy: ${#qt_dlls[@]}"
              for f in "${qt_dlls[@]}"; do
                cp -u "$f" "$pkgdir/" || true
              done
              echo "Copied ${#qt_dlls[@]} Qt6 DLLs"
          }
        else
          echo "windeployqt6.exe not found, fallback to manual copy of Qt6*.dll"
          shopt -s nullglob
          qt_dlls=(/mingw64/bin/Qt6*.dll)
          echo "Qt6 DLLs to copy: ${#qt_dlls[@]}"
          for f in "${qt_dlls[@]}"; do
            cp -u "$f" "$pkgdir/" || true
          done
          echo "Copied ${#qt_dlls[@]} Qt6 DLLs"
        fi

        # 2) Copy main executable into package directory (after deployment)
        cp -u ./YUViz.exe "$pkgdir/"

        # 2.1) Always copy essential QML modules (Controls/Layouts) into package qml dir
        qt_qml_dir=""
        if [ -d "/mingw64/share/qt6/qml" ]; then
          qt_qml_dir="/mingw64/share/qt6/qml"
        elif [ -d "/mingw64/lib/qt6/qml" ]; then
          qt_qml_dir="/mingw64/lib/qt6/qml"
        fi
        echo "Qt QML dir resolved to: ${qt_qml_dir:-<not found>}"
        mkdir -p "$pkgdir/qml"
        if [ -n "$qt_qml_dir" ]; then
          for m in \
            QtQml \
            QtQuick \
            QtQuick.2 \
            QtQuick/Window \
            QtQuick/Controls \
            QtQuick/Controls/Basic \
            QtQuick/Layouts \
            QtQuick/Dialogs \
            QtQuick/Dialogs/quickimpl \
            Qt/labs/folderlistmodel \
            Qt/labs/settings; do
            if [ -d "$qt_qml_dir/$m" ]; then
              dest="$pkgdir/qml/$m"
              mkdir -p "$dest"
              cp -r "$qt_qml_dir/$m"/* "$dest/" 2>/dev/null || true
            fi
          done
        else
          echo "Warning: Qt QML dir not found; skipping QML module copy"
        fi

        # 3) Copy FFmpeg DLLs (common components)
        for lib in avcodec avformat avutil swscale swresample avfilter; do
          find /mingw64/bin -name "${lib}*.dll" -exec cp -u {} "$pkgdir/" \; 2>/dev/null || true
        done
        echo "FFmpeg DLLs present: $(ls -1 "$pkgdir"/avcodec*.dll 2>/dev/null | wc -l) avcodec, $(ls -1 "$pkgdir"/avformat*.dll 2>/dev/null | wc -l) avformat"

        # 4) Copy MinGW runtime and common base deps (cover nanosleep symbol source)
        for dll in \
          libwinpthread-1.dll \
          libstdc++-6.dll \
          libgcc_s_seh-1.dll \
          libssp-0.dll \
          libiconv-2.dll \
          libbz2-1.dll \
          liblzma-5.dll \
          zlib1.dll \
          libzstd-1.dll \
          libxml2-2.dll; do
          [ -f "/mingw64/bin/$dll" ] && cp -u "/mingw64/bin/$dll" "$pkgdir/" || true
        done
        echo "Runtime/base DLLs copied."

        # 5) Optional: EGL/OpenGL related
        find /mingw64/bin -name "libEGL*.dll"   -exec cp -u {} "$pkgdir/" \; 2>/dev/null || true
        find /mingw64/bin -name "libGLESv2*.dll" -exec cp -u {} "$pkgdir/" \; 2>/dev/null || true

        # 6) Two passes of ldd to copy direct deps from /mingw64
        copy_missing_deps() {
          for f in "$pkgdir"/YUViz.exe "$pkgdir"/*.dll; do
            [ -f "$f" ] || continue
            ldd "$f" 2>/dev/null | awk '/=>/ {print $3} /^\t.*\.dll/ {print $1}' | sed '/not found/d' | tr -d '\r' | while read -r p; do
              [ -n "$p" ] || continue
              if [ -f "$p" ] && echo "$p" | grep -q "/mingw64/"; then
                cp -u "$p" "$pkgdir/" || true
              else
                base="$(basename "$p")"
                [ -f "/mingw64/bin/$base" ] && cp -u "/mingw64/bin/$base" "$pkgdir/" || true
              fi
            done || true
          done
        }
        copy_missing_deps
        copy_missing_deps
        echo "After ldd passes, total files in package: $(ls -1 "$pkgdir" | wc -l)"

        # 7) Ensure platform plugin exists
        mkdir -p "$pkgdir/platforms"
        find /mingw64 -name "qwindows.dll" -exec cp -u {} "$pkgdir/platforms/" \; 2>/dev/null || true

        # 7.1) Write qt.conf to point QML imports to local qml folder and plugins to app dir
        cat > "$pkgdir/qt.conf" << 'EOF'
        [Paths]
        Prefix=.
        Qml2Imports=./qml
        Plugins=.
        EOF

        # 8) Package to zip
        powershell -Command "Compress-Archive -Path '${pkgdir}\\*' -DestinationPath '..\\YUViz-windows.zip' -Force"
        
    - name: Debug file existence
      shell: msys2 {0}
      run: |
        echo "=== Checking file existence ==="
        ls -la YUViz-windows.zip || echo "File not found in current dir"
        find . -name "YUViz-windows.zip" -type f || echo "File not found anywhere"
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: YUViz-windows
        path: YUViz-windows.zip

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies (Homebrew)
      run: |
        brew install cmake ninja pkg-config aqtinstall
        brew install ffmpeg

    - name: Install Qt SDK using aqtinstall
      run: |
        aqt install-qt mac desktop 6.9.1 -m qtshadertools -O ${{ runner.temp }}/qt

    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DQt6_DIR=${{ runner.temp }}/qt/6.9.1/macos/lib/cmake/Qt6
        
    - name: Build
      run: |
        cd build
        ninja
        if [ ! -f "YUViz.app/Contents/MacOS/YUViz" ]; then
          echo "Build failed: YUViz.app not found or is incomplete."
          ls -la
          exit 1
        fi

    - name: Manually Bundle All Homebrew Dependencies
      run: |
        cd build
        APP_BUNDLE="YUViz.app"
        FRAMEWORKS_DIR="${APP_BUNDLE}/Contents/Frameworks"
        EXECUTABLE_PATH="${APP_BUNDLE}/Contents/MacOS/YUViz"

        echo "--- Manually bundling all Homebrew dependencies ---"
        mkdir -p "${FRAMEWORKS_DIR}"
        
        # This function recursively finds ALL non-Qt, non-system dependencies
        # by looking for both absolute /opt/homebrew paths and relative @rpath links.
        copy_deps() {
          local target_file=$1
          if [ ! -f "$target_file" ]; then return; fi

          # Get all dependency paths, ignoring system libs
          local all_deps=$(otool -L "$target_file" | grep -v '^\t/usr/lib' | grep -v '^\t/System' | awk '{print $1}')
          
          for dep_path in $all_deps; do
            # Process if it's a homebrew path OR an rpath (which we assume is a homebrew peer)
            if [[ "$dep_path" == "@rpath/"* ]] || [[ "$dep_path" == "/opt/homebrew/"* ]]; then
              local dep_name=$(basename "$dep_path")

              # Skip if it's a self-reference or already copied
              if [[ "$(basename "$target_file")" == "$dep_name" ]] || [[ -f "${FRAMEWORKS_DIR}/${dep_name}" ]]; then
                continue
              fi

              # Find the dependency's original location in the Homebrew directory
              local original_dep=$(find /opt/homebrew/lib -name "$dep_name" -print -quit)
              if [ -n "$original_dep" ]; then
                echo "Copying dependency: $dep_name"
                cp "$original_dep" "${FRAMEWORKS_DIR}/"
                chmod 755 "${FRAMEWORKS_DIR}/${dep_name}"
                # Recurse to find dependencies of the newly copied library
                copy_deps "${FRAMEWORKS_DIR}/${dep_name}"
              else
                # This case should not happen for homebrew libs, but is a useful warning
                echo "Warning: Could not find original location for '$dep_name'"
              fi
            fi
          done
        }

        # Start the recursive copy with the main executable
        copy_deps "$EXECUTABLE_PATH"
        echo "--- Finished copying dependencies. Now fixing paths. ---"

        # Now, fix the paths for all binaries in the bundle
        find "${FRAMEWORKS_DIR}" -type f -perm +111 -print0 | while IFS= read -r -d $'\0' lib; do
          # Fix the library's own ID to be relative to @rpath
          install_name_tool -id "@rpath/$(basename "$lib")" "$lib"
          # Find all its dependencies and change their paths to be relative to @rpath
          deps=$(otool -L "$lib" | grep -E '(/opt/homebrew|@rpath)' | awk '{print $1}')
          for dep in $deps; do
            dep_name=$(basename "$dep")
            if [[ -f "${FRAMEWORKS_DIR}/$dep_name" ]]; then
              install_name_tool -change "$dep" "@rpath/$dep_name" "$lib"
            fi
          done
        done

        # Finally, fix the paths in the main executable itself
        deps=$(otool -L "$EXECUTABLE_PATH" | grep '/opt/homebrew' | awk '{print $1}')
        for dep in $deps; do
          dep_name=$(basename "$dep")
          install_name_tool -change "$dep" "@rpath/$dep_name" "$EXECUTABLE_PATH"
        done
        echo "--- Finished fixing all paths. ---"
        
    - name: Run macdeployqt to bundle Qt frameworks
      run: |
        cd build
        ${{ runner.temp }}/qt/6.9.1/macos/bin/macdeployqt YUViz.app -no-strip -qmldir=../src/qml

    - name: Ad-hoc Sign the Application Bundle
      run: |
        echo "--- Signing the application bundle to allow it to run ---"
        # Create a basic entitlements file to allow the app to run on modern macOS
        cat << EOF > entitlements.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Sign from the inside out: all dylibs and frameworks first
        find build/YUViz.app -type f \( -name "*.dylib" -o -path "*.framework/Versions/A/*" \) -exec codesign --force --sign - --entitlements entitlements.plist {} \;
        # Sign the main executable
        codesign --force --sign - --entitlements entitlements.plist build/YUViz.app/Contents/MacOS/YUViz
        # Sign the app bundle itself
        codesign --force --sign - --entitlements entitlements.plist build/YUViz.app
        # Verify the final signature
        codesign --verify --deep --strict --verbose=2 build/YUViz.app

    - name: Create macOS Disk Image (DMG)
      run: |
        cd build
        hdiutil create -volname YUViz -srcfolder YUViz.app -ov -format UDZO ../YUViz-macos.dmg

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: YUViz-macos
        path: YUViz-macos.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build pkg-config
        sudo apt-get install -y libavcodec-dev libavutil-dev libswscale-dev libavformat-dev libavfilter-dev
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev libegl1-mesa-dev
        sudo apt-get install -y libxkbcommon-dev libxkbcommon-x11-dev
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
        sudo apt-get install -y libxcb1-dev libxcb-cursor0 libxcb-keysyms1 libxcb-randr0 libxcb-shape0 libxcb-xfixes0
        
    - name: Install Qt 6.9.1 (Pre-built)
      run: |
        # Install Qt using aqtinstall (much faster)
        pip install aqtinstall
        # Install Qt 6.9.1 with ShaderTools
        python -m aqt install-qt linux desktop 6.9.1 linux_gcc_64 --modules qtshadertools --outputdir $HOME/Qt
        
    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        $HOME/Qt/6.9.1/gcc_64/bin/qt-cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cd build
        ninja
        
    - name: Create Linux package
      run: |
        cd build
        mkdir -p release-package
        
        # Copy main executable
        cp YUViz release-package/
        
        # Create launch script
        cat > release-package/YUViz.sh << 'EOF'
        #!/bin/bash
        # Get the directory where this script is located
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        
        # Set LD_LIBRARY_PATH to include Qt libraries
        export LD_LIBRARY_PATH="$DIR/lib:$LD_LIBRARY_PATH"
        
        # Set Qt plugin path
        export QT_PLUGIN_PATH="$DIR/lib/qt6/plugins"
        
        # Set Qt QML path
        export QML2_IMPORT_PATH="$DIR/lib/qt6/qml"
        
        # Launch the application
        "$DIR/YUViz" "$@"
        EOF
        chmod +x release-package/YUViz.sh
        
        # Create debug script
        cat > release-package/debug-linux.sh << 'EOF'
        #!/bin/bash
        echo "Qt6 YUViz - Linux Debug Information"
        echo "=========================================="
        echo
        echo "Current directory: $(pwd)"
        echo
        echo "Checking for required files:"
        if [ -f "YUViz" ]; then echo "[OK] YUViz executable found"; else echo "[MISSING] YUViz executable"; fi
        if [ -d "lib" ]; then echo "[OK] lib directory found"; else echo "[MISSING] lib directory"; fi
        if [ -d "lib/qt6" ]; then echo "[OK] lib/qt6 directory found"; else echo "[MISSING] lib/qt6 directory"; fi
        if [ -d "lib/qt6/plugins" ]; then echo "[OK] lib/qt6/plugins directory found"; else echo "[MISSING] lib/qt6/plugins directory"; fi
        if [ -d "lib/qt6/plugins/platforms" ]; then echo "[OK] platforms directory found"; else echo "[MISSING] platforms directory"; fi
                 echo
         echo "Qt libraries in lib/:"
         ls -la lib/libQt6*.so* 2>/dev/null | wc -l || echo "0"
         echo
         echo "X11/XCB libraries in lib/:"
         ls -la lib/libxcb*.so* lib/libX11*.so* 2>/dev/null | wc -l || echo "0"
         echo
         echo "Platform plugins:"
         ls -la lib/qt6/plugins/platforms/ 2>/dev/null || echo "No platform plugins found"
        echo
        echo "Setting up environment and testing..."
        export LD_LIBRARY_PATH="$(pwd)/lib:$LD_LIBRARY_PATH"
        export QT_PLUGIN_PATH="$(pwd)/lib/qt6/plugins"
        export QML2_IMPORT_PATH="$(pwd)/lib/qt6/qml"
        export QT_DEBUG_PLUGINS=1
        echo "Environment variables set:"
        echo "  LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        echo "  QT_PLUGIN_PATH: $QT_PLUGIN_PATH"
        echo "  QML2_IMPORT_PATH: $QML2_IMPORT_PATH"
        echo
        echo "Testing application..."
        echo "Running with strace to see system calls..."
        strace -o /tmp/YUViz.strace ./YUViz --help 2>&1
        echo "strace output saved to /tmp/YUViz.strace"
        echo
        echo "Checking for core dumps..."
        ls -la /tmp/core* 2>/dev/null || echo "No core dumps found"
        echo
        echo "Testing with gdb for more detailed crash info..."
        gdb -batch -ex "run --help" -ex "bt" ./YUViz 2>&1 || echo "gdb not available"
        
        echo "Testing with valgrind for memory issues..."
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all ./YUViz --help 2>&1 | head -50 || echo "valgrind not available"
        echo
        echo "Debug completed"
        EOF
        chmod +x release-package/debug-linux.sh
        
        # Create simple test script
        cat > release-package/test-simple.sh << 'EOF'
        #!/bin/bash
        echo "Simple test for YUViz..."
        export LD_LIBRARY_PATH="$(pwd)/lib:$LD_LIBRARY_PATH"
        export QT_PLUGIN_PATH="$(pwd)/lib/qt6/plugins"
        export QML2_IMPORT_PATH="$(pwd)/lib/qt6/qml"
        
        echo "Testing basic startup..."
        timeout 5s ./YUViz --version 2>&1 || echo "Application crashed or timed out"
        echo "Test completed"
        EOF
        chmod +x release-package/test-simple.sh
        
        # Create library check script
        cat > release-package/check-libs.sh << 'EOF'
        #!/bin/bash
        echo "Checking for missing libraries..."
        ldd ./YUViz | grep "not found" || echo "All libraries found"
        echo
        echo "Checking Qt library versions..."
        for lib in lib/libQt6*.so*; do
          if [ -f "$lib" ]; then
            echo "$lib: $(readelf -d "$lib" | grep SONAME || echo "No SONAME")"
          fi
        done
        EOF
        chmod +x release-package/check-libs.sh
        
        # Copy Qt libraries and dependencies
        mkdir -p release-package/lib
        
        # Use linuxdeploy to collect dependencies
        wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        
        # Create a temporary AppDir and extract libraries
        mkdir -p AppDir/usr/bin
        cp YUViz AppDir/usr/bin/
        
        # Run linuxdeploy to collect dependencies
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --executable AppDir/usr/bin/YUViz || true
        
        # Copy collected libraries to our package
        if [ -d "AppDir/usr/lib" ]; then
          cp -r AppDir/usr/lib/* release-package/lib/ || true
        fi
        
        # Manually copy Qt libraries
        cp -r $HOME/Qt/6.9.1/gcc_64/lib/libQt6*.so* release-package/lib/ || true
        
        # Copy Qt plugins
        echo "Copying Qt plugins..."
        mkdir -p release-package/lib/qt6/plugins
        
        # Copy platform plugins
        mkdir -p release-package/lib/qt6/plugins/platforms
        cp $HOME/Qt/6.9.1/gcc_64/plugins/platforms/libqxcb.so release-package/lib/qt6/plugins/platforms/ || echo "libqxcb.so not found"
        cp $HOME/Qt/6.9.1/gcc_64/plugins/platforms/libqwayland.so release-package/lib/qt6/plugins/platforms/ || echo "libqwayland.so not found"
        cp $HOME/Qt/6.9.1/gcc_64/plugins/platforms/libqminimal.so release-package/lib/qt6/plugins/platforms/ || echo "libqminimal.so not found"
        cp $HOME/Qt/6.9.1/gcc_64/plugins/platforms/libqoffscreen.so release-package/lib/qt6/plugins/platforms/ || echo "libqoffscreen.so not found"
        
        # Copy image format plugins
        mkdir -p release-package/lib/qt6/plugins/imageformats
        cp $HOME/Qt/6.9.1/gcc_64/plugins/imageformats/libqjpeg.so release-package/lib/qt6/plugins/imageformats/ || echo "libqjpeg.so not found"
        cp $HOME/Qt/6.9.1/gcc_64/plugins/imageformats/libqpng.so release-package/lib/qt6/plugins/imageformats/ || echo "libqpng.so not found"
        cp $HOME/Qt/6.9.1/gcc_64/plugins/imageformats/libqgif.so release-package/lib/qt6/plugins/imageformats/ || echo "libqgif.so not found"
        
        # Copy style plugins
        mkdir -p release-package/lib/qt6/plugins/styles
        cp $HOME/Qt/6.9.1/gcc_64/plugins/styles/libqgtk3.so release-package/lib/qt6/plugins/styles/ || echo "libqgtk3.so not found"
        
        # Copy multimedia plugins
        mkdir -p release-package/lib/qt6/plugins/mediaservice
        cp $HOME/Qt/6.9.1/gcc_64/plugins/mediaservice/libqgst*.so release-package/lib/qt6/plugins/mediaservice/ 2>/dev/null || echo "GStreamer plugins not found"
        
        # Copy audio plugins
        mkdir -p release-package/lib/qt6/plugins/audio
        cp $HOME/Qt/6.9.1/gcc_64/plugins/audio/libqtaudio_*.so release-package/lib/qt6/plugins/audio/ 2>/dev/null || echo "Audio plugins not found"
        
        # Copy video plugins
        mkdir -p release-package/lib/qt6/plugins/video
        cp $HOME/Qt/6.9.1/gcc_64/plugins/video/libqtvideo_*.so release-package/lib/qt6/plugins/video/ 2>/dev/null || echo "Video plugins not found"
        
                 # Copy QML modules
         mkdir -p release-package/lib/qt6/qml
         cp -r $HOME/Qt/6.9.1/gcc_64/qml/QtQml release-package/lib/qt6/qml/ || echo "QtQml not found"
         cp -r $HOME/Qt/6.9.1/gcc_64/qml/QtQuick release-package/lib/qt6/qml/ || echo "QtQuick not found"
         cp -r $HOME/Qt/6.9.1/gcc_64/qml/QtQuick.2 release-package/lib/qt6/qml/ || echo "QtQuick.2 not found"
         
                 # Copy additional Qt libraries that might be missing
        echo "Copying additional Qt libraries..."
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6DBus.so* release-package/lib/ || echo "libQt6DBus not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6Svg.so* release-package/lib/ || echo "libQt6Svg not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6SvgWidgets.so* release-package/lib/ || echo "libQt6SvgWidgets not found"
        
        # Copy more essential Qt libraries
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6OpenGL.so* release-package/lib/ || echo "libQt6OpenGL not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6OpenGLWidgets.so* release-package/lib/ || echo "libQt6OpenGLWidgets not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6Multimedia.so* release-package/lib/ || echo "libQt6Multimedia not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6MultimediaWidgets.so* release-package/lib/ || echo "libQt6MultimediaWidgets not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6MultimediaCore.so* release-package/lib/ || echo "libQt6MultimediaCore not found"
        cp $HOME/Qt/6.9.1/gcc_64/lib/libQt6MultimediaQuick.so* release-package/lib/ || echo "libQt6MultimediaQuick not found"
        
                 # Copy FFmpeg libraries
         cp /usr/lib/x86_64-linux-gnu/libav*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libsw*.so* release-package/lib/ || true
         
         # Copy X11/XCB libraries
         echo "Copying X11/XCB libraries..."
         cp /usr/lib/x86_64-linux-gnu/libxcb*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libX11*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXext*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXrender*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXrandr*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXfixes*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXcursor*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXinerama*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXi*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libXxf86vm*.so* release-package/lib/ || true
         
         # Copy OpenGL and graphics libraries
         cp /usr/lib/x86_64-linux-gnu/libGL*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libEGL*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libGLESv2*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libGLU*.so* release-package/lib/ || true
         cp /usr/lib/x86_64-linux-gnu/libdrm*.so* release-package/lib/ || true
        
        # Create README
        cat > release-package/README.txt << 'EOF'
        Qt6 YUViz - Linux Release
        
        Installation Instructions:
        1. Extract the zip file to any directory
        2. Run: ./YUViz.sh
        3. Or make YUViz executable and run directly: ./YUViz
        4. Supported video formats: MP4, AVI, MOV, MKV, etc.
        
        Troubleshooting:
        - If you get "Qt platform plugin" errors, ensure you're running ./YUViz.sh (not ./YUViz directly)
        - For missing library errors, install: sudo apt-get install libavcodec58 libavformat58 libavutil56 libswscale5
        - For X11/display issues, ensure X11 is running or use Wayland
        - For Wayland issues, try: export QT_QPA_PLATFORM=xcb
        - For "libxcb-cursor.so.0" errors, install: sudo apt-get install libxcb-cursor0
        - For other X11 library errors, install: sudo apt-get install libxcb1 libxcb-keysyms1 libxcb-randr0 libxcb-shape0 libxcb-xfixes0
        
        System Requirements: 
        - Linux x86_64 (Ubuntu 20.04+ or equivalent)
        - glibc 2.27+
        - X11 or Wayland display server
        - X11 libraries (libxcb-cursor0, libxcb1, etc.)
        
        Note: The YUViz.sh script sets up the correct environment variables for Qt plugins.
        EOF
        
        # Create zip package
        zip -r ../YUViz-linux.zip release-package/
        
    - name: Debug file existence
      run: |
        echo "=== Checking file existence ==="
        ls -la YUViz-linux.zip || echo "File not found in current dir"
        find . -name "YUViz-linux.zip" -type f || echo "File not found anywhere"
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: YUViz-linux
        path: YUViz-linux.zip

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate release tag
      id: commit
      run: |
        SHA_SHORT=$(git rev-parse --short HEAD)
        COMMIT_DATE=$(git log -1 --format=%cd --date=format:'%Y%m%d-%H%M')
        
        if [[ "${{ github.ref_name }}" == v* ]]; then
          RELEASE_TAG="${{ github.ref_name }}"
        else
          RELEASE_TAG="build-${COMMIT_DATE}-${SHA_SHORT}"
        fi
        
        echo "RELEASE_TAG=${RELEASE_TAG}"
        echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display artifact structure
      run: |
        echo "--- Downloaded Artifacts ---"
        ls -R artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.commit.outputs.release_tag }}
        name: YUViz ${{ steps.commit.outputs.release_tag }}
        body: |
          Automated build from commit ${{ github.sha }}
          
          **Download links:**
          - Windows: YUViz-windows.zip
          - macOS: YUViz-macos.dmg
          - Linux: YUViz-linux.zip
          
          **Changes:**
          ${{ github.event.head_commit.message }}
        files: |
          artifacts/YUViz-windows/YUViz-windows.zip
          artifacts/YUViz-macos/YUViz-macos.dmg
          artifacts/YUViz-linux/YUViz-linux.zip